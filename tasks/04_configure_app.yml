---
- name: Set Postgres Password since it was provided
  ansible.builtin.set_fact:
    postgres_dbpw: "{{ postgres_dbpassword }}"
  when: postgres_dbpassword
  no_log: true

- name: Create Postgres Password since it was not provided
  ansible.builtin.set_fact:
    postgres_dbpw: "{{ lookup('community.general.random_string', length=24, special=false) }}"
  when: not postgres_dbpassword
  no_log: true

- name: Create Encrypted Postgres Password
  ansible.builtin.set_fact:
    postgres_encrypted_password: "md5{{ (postgres_dbpw + postgres_dbuser) | hash('md5')  }}"
  no_log: true

- name: Check if User Created Flag file is present
  ansible.builtin.stat:
    path: "{{ postgres_user_created_path }}"
  register: postgres_user_created

- name: Create Postgres user
  become_user: "{{ default_postgres_system_user }}"
  community.postgresql.postgresql_user:
    name: "{{ postgres_dbuser }}"
    password: "{{ postgres_encrypted_password }}"
    role_attr_flags: CREATEDB
  no_log: true
  when: not postgres_user_created.stat.exists

- name: Touch a file to demonstrate User is Created
  ansible.builtin.file:
    path: "{{ postgres_user_created_path }}"
    state: touch
    mode: '0700'
  when: not postgres_user_created.stat.exists

- name: Check if Database Created Flag file is present
  ansible.builtin.stat:
    path: "{{ postgres_db_created_path }}"
  register: postgres_db_created

- name: Create Postgres DB and grant to user
  block:

    - name: Create Postgres DB and grant to user (without collate and without ctype)
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_dbuser }}"
        template: "template0"
        encoding: "UTF8"
      when: (not postgres_db_lc_collate and not postgres_db_lc_ctype)

    - name: Create Postgres DB and grant to user (with collate and without ctype)
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_dbuser }}"
        template: "template0"
        encoding: "UTF8"
        lc_collate: "{{ postgres_db_lc_collate }}"
      when: (postgres_db_lc_collate and not postgres_db_lc_ctype)

    - name: Create Postgres DB and grant to user (without collate and with ctype)
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_dbuser }}"
        template: "template0"
        encoding: "UTF8"
        lc_ctype: "{{ postgres_db_lc_ctype }}"
      when: (not postgres_db_lc_collate and postgres_db_lc_ctype)

    - name: Create Postgres DB and grant to user (with collate and with ctype)
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_dbuser }}"
        template: "template0"
        encoding: "UTF8"
        lc_collate: "{{ postgres_db_lc_collate }}"
        lc_ctype: "{{ postgres_db_lc_ctype }}"
      when: (postgres_db_lc_collate and postgres_db_lc_ctype)

  become_user: "{{ default_postgres_system_user }}"
  when: not postgres_db_created.stat.exists

- name: Touch a file to demonstrate Database is Created
  ansible.builtin.file:
    path: "{{ postgres_db_created_path }}"
    state: touch
    mode: '0700'
  when: not postgres_db_created.stat.exists

# The postgres HBA file is dependent on Major Version. All of this finagling is to get to the
# Major version for Postgres. If they change the format of the output of 'SHOW server_version;'
# this will all break and I will cry big manly tears

- name: Get Postgres Version
  become_user: "{{ default_postgres_system_user }}"
  community.postgresql.postgresql_query:
    query: "SHOW server_version;"
    db: "postgres"  # The default postgres Db
  register: postgres_raw_version

- name: Set Large Version Fact
  ansible.builtin.set_fact:
    postgres_version: "{{ (postgres_raw_version.query_result | first)['server_version'] }}"

- name: Set Major/Minor Version Fact
  ansible.builtin.set_fact:
    postgres_majorminor_ver: "{{ postgres_version | split (' ') | first }}"

- name: Set Major Version Fact
  ansible.builtin.set_fact:
    postgres_major_ver: "{{ postgres_majorminor_ver | split ('.') | first }}"

- name: HBA Conf Location
  ansible.builtin.set_fact:
    hba_conf_location: "/etc/postgresql/{{ postgres_major_ver }}/main/pg_hba.conf"

- name: Template out pg_hba.conf
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ hba_conf_location }}"
    force: true
    mode: '0770'  # Ansible-Lint hates when this isn't set

- name: Copy Postgres DB Password to host location
  ansible.builtin.copy:
    content: "{{ postgres_dbpw }}"
    dest: "{{ postgres_pass_location }}"
    force: true
    owner: "{{ default_postgres_system_user }}"
    group: "{{ default_postgres_system_user }}"
    mode: "0700"
  when: postgres_pass_location

- name: Restart postgresql service
  ansible.builtin.service:
    name: postgresql
    state: restarted
    enabled: true
